\usepackage[nonumberlist, toc]{glossaries}
\usepackage{acronym}

\newglossaryentry{gamification}{name=gamification,
description={the use of game thinking and game mechanics in non-game contexts to engage users in solving problems. Further descriptions about this subject may be found in reference~\cite{gamification}}}

\newglossaryentry{Facebook}{name=Facebook,
description={an online social networking service.}}

\newglossaryentry{synergy}{name=synergizes,
description={a term used to describe how different elements interacts and functions together.}}

\newglossaryentry{bloated}{name=bloated,
description={a term used to describe libraries and software that contains a lot more functionality than needed. This is a problem mainly because it can make the code harder to organize and the entire app may end up a lot bigger for the end user.}}

\newglossaryentry{gdrive}{name=Google Drive,
description={a file storage and synchronization service provided by Google which enables user cloud storage, file sharing and collaborative editing.}}

\newglossaryentry{mvp}{name=Model–view–presenter (MVP),
description={ a derivative of the model–view–controller (MVC) software pattern, also used mostly for building user interfaces.}}

\newglossaryentry{mvc}{name=Model–view–controller (MVC),
description={a software pattern for implementing user interfaces. It divides a given software app into three interconnected parts. The model consists of app data, business rules, logic, and functions. A view can be any output representation of information. The controller accepts input and converts it to commands for the model or view. Further information about this subject may be found in reference~\cite{mvcrep}}}


\newglossaryentry{opt}{name=optimization,
description={is the process of modifying a software system to make some aspect of it work more efficiently or use fewer resources.}}

\newglossaryentry{unit}{name=unit testing,
description={is a form of testing where individual parts of the program is tested against predefined data. This makes sure future changes does not alter existing functionality unknowingly. Unit testing is a form of white box testing where the tests are written for the source code.}}
